---
layout: post
title: "对象之死亡历程"
category: Impression After Reading
tags:
 - Java
 - GC
 - JVM
keywords: JVM,Java,GC,深入理解Java虚拟机
---

####目的

上一篇文章中，介绍了<a href="http://www.congmo.net/blog/2012/07/04/java-death-of-object/">如何判断一个对象已死亡</a>，本篇将继续深入，主要讲解通过怎样的方式处理掉这些死去的对象。即垃圾回收算法。

####标记-清除算法

标记-清除（Mark-Sweep）算法是最基础的算法，就如它的名字一样，算法分为"标记"和"清除"两个阶段：首先标记出所有需要回收的对象，在标记完成后统一回收掉所有被标记的对象。之所以说它是最基础的收集算法，是因为后续的收集算法都是基于这种思路并对其缺点进行改进而得到的。它主要有两个缺点：一个是效率问题，标记和清楚过程的效率都不高；另外一个是空间问题，标记清楚后会产生大量不连续的内存碎片，空间碎片太多可能会导致，当程序在以后的运行过程中需要分配较大对象时无法找到足够连续的内存空间而不得不提前出发另一次垃圾收集动作。
<div class="center">
  <img style="max-width:700px" src='/post_images/2012/07/mark-sweep.png'/>
</div>
一幅图足够解释标记-清楚算法，可清晰的看出确实会造成很多内存碎片。

####复制算法

为了解决效率问题，一种称为复制（Copying）的收集算法就出现了，它将可用内存按容量划分为大小相等的两块，每次只是用其中一块。当这一块的内存用完了，就将还存活着的对象复制到另外一块上面，然后再把已使用过的内存空间一次清理掉。这样使得每次都是对其中的一块进行内存回收，没存分配时也就不用考虑内存碎片等复杂情况，只要移动堆顶指针，按顺序分配内存即可，实现简单，运行高效。只是这种算法的代价是将员村缩小为原来的一半，未免太高了一点。

同样一幅图来说明回收算法在回收前后的内存变化。

<div class="center">
  <img style="max-width:700px" src='/post_images/2012/07/gc-copying.png'/>
</div>

现在的商业虚拟机都采用这种收集算法来回收新生代，IBM的专门研究表明，新生代中的对象98%是朝生夕死的，所以并不需要按照1：1的比例来划分内存空间，而是将内存分为一块较大的Eden空间和两块较小的Survivor空间，每次使用Eden和其中的一块Survivor。当回收时，将Eden和Survivor中还存活着的兑现个一次性地拷贝到另外一块Survivor空间上，最后清理掉Eden和刚才用过的Survivor的空间。HotSpot虚拟机默认Eden和Survivor的大小比例是8：1，也就是每次新生代中可用内存空间为整个新生代容量的90%，只有10%的内存是会被浪费的。

####标记-整理算法

复制手机算法在对象存活率较高时就要执行较多的复制操作，效率将会贬低。更关键的是，如果不想浪费50%的空间，就需要有额外的空间进行分配担保，以应对被使用的内存中所有对象都100%存活的极端情况，所以在老年代一般不能直接选用这种算法。

根据老年代的特点，有人提出了另外一种"标记-整理"算法，标记过程仍然与标记-清楚算法一样，但是后续步骤不是直接对可回收对象进行清理，而是让所有存活的对象都向一端移动，然后直接清理掉端边界意外的内存。

图解标记-整理算法。

<div class="center">
  <img style="max-width:700px" src='/post_images/2012/07/mark-compact.png'/>
</div>

####分代收集算法

当前商业虚拟机的垃圾收集都采用分代收集（Generational Collection）算法，这种算法并没有什么新的思想，只是根据对象的存货周期的不同将内存划分为几块。一般是把Java堆分成新生代和老年代，这样就可以根据各个年代的特点采用最适当的手机算法。在新生代中，每次垃圾收集时都发现有大批对象死去，只有少量存活，那么就选用复制算法，只需要付出少量存活对象的复制成本就可以完成收集。而老年代中因为对象存活率高、没有额外空间对它进行分配担保，就必须使用标记-清理或标记-整理算法来进行回收。