<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[葱末COngMo]]></title>
  <link href="http://congmo.github.com/atom.xml" rel="self"/>
  <link href="http://congmo.github.com/"/>
  <updated>2012-02-02T12:24:25+08:00</updated>
  <id>http://congmo.github.com/</id>
  <author>
    <name><![CDATA[xiaori.liu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Guest Post on RubyLearning: 中文Building DSLs with yield and instance_eval]]></title>
    <link href="http://congmo.github.com/blog/2012/02/01/test-chinese/"/>
    <updated>2012-02-01T00:00:00+08:00</updated>
    <id>http://congmo.github.com/blog/2012/02/01/test-chinese</id>
    <content type="html"><![CDATA[<p>I recently wrote a guest post for the RubyLearning blog entitled <a href="http://rubylearning.com/blog/2010/11/30/how-do-i-build-dsls-with-yield-and-instance_eval/">&#8220;How do I build DSLs with yield and instance_eval?&#8221;</a>. It gives a brief overview of how to use Ruby to build simple internal DSLs. Enjoy!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MultiJSON: The Swappable JSON Handler]]></title>
    <link href="http://congmo.github.com/blog/2012/01/17/2/"/>
    <updated>2012-01-17T00:00:00+08:00</updated>
    <id>http://congmo.github.com/blog/2012/01/17/2</id>
    <content type="html"><![CDATA[<p><span class="caps">JSON</span> has become ubiquitous. From Facebook and Twitter both declaring it to be the preferred (and in some cases only) option for <span class="caps">API</span> access to the new OAuth 2.0 draft spec declaring that <span class="caps">JSON</span> is the only acceptable response format for OAuth token responses, <span class="caps">JSON</span> is here to stay. What isn&#8217;t ubiquitous, however, are people&#8217;s preferred implementations.</p>
<p>As library authors it is our duty to try to support as large a part of the community as possible and do so in a friendly manner. To that end, today we&#8217;re releasing <strong>MultiJSON</strong>, a simple library that allows you to seamlessly provide multiple <span class="caps">JSON</span> backends for your library with intelligent defaulting. Install with a simple <code>gem install multi_json</code> and then get started like so:</p>
<div>
<pre><code class='ruby'>require 'multi_json'
<ol>
	<li>Decode using default engine.<br />
MultiJson.decode(&#8216;{&quot;abc&quot;:&quot;def&quot;}) # =&gt; {&quot;abc&quot; =&gt; &quot;def&quot;}&#8217;)</li>
</ol>
<ol>
	<li>Set an engine using a symbol.<br />
MultiJson.engine = :active_support</li>
</ol>
<ol>
	<li>Encode using ActiveSupport<br />
MultiJson.encode({:abc =&gt; &quot;def&quot;}) # =&gt; &#8216;{&quot;abc&quot;:&quot;def&quot;}&#8217;</code></pre><br />
</div></li>
</ol>
<p>This gem is primarily for library authors, allowing you to use the best <span class="caps">JSON</span> available on the users&#8217; systems without explicitly requiring one library over another. This way you can be sure that your <span class="caps">JSON</span> handling will work across implementations (e.g. JRuby) as well as requiring as little extra code as possible (the gem detects existing libraries before requiring more by default).</p>
<p>Engines supported by default are:</p>
<ul>
	<li><code>yajl-ruby</code></li>
	<li><code>json</code> (gem)</li>
	<li><code>active_support</code></li>
	<li><code>json_pure</code></li>
</ul>
<p>We hope that this will make development of <span class="caps">JSON</span>-relying libraries a little bit less of a headache for library authors and users alike. The code is, as always, <a href="http://github.com/intridea/multi_json">available on GitHub</a>.</p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[teesesest]]></title>
    <link href="http://congmo.github.com/blog/2012/01/16/testtesttest/"/>
    <updated>2012-01-16T00:00:00+08:00</updated>
    <id>http://congmo.github.com/blog/2012/01/16/testtesttest</id>
    <content type="html"><![CDATA[<p>ddddddddddddddddddddddddddddd
ddddddddddddddddddddddddddddd
dddddddddddddddddddddddddddddddddd
dddddddddddddddddddddddddddddddd
ddddddddddddddddddddddddddd</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Guest Post on RubyLearning: Building DSLs with yield and instance_eval]]></title>
    <link href="http://congmo.github.com/blog/2010/11/30/rubylearning-guest-post/"/>
    <updated>2010-11-30T00:00:00+08:00</updated>
    <id>http://congmo.github.com/blog/2010/11/30/rubylearning-guest-post</id>
    <content type="html"><![CDATA[<p>I recently wrote a guest post for the RubyLearning blog entitled <a href="http://rubylearning.com/blog/2010/11/30/how-do-i-build-dsls-with-yield-and-instance_eval/">&#8220;How do I build DSLs with yield and instance_eval?&#8221;</a>. It gives a brief overview of how to use Ruby to build simple internal DSLs. Enjoy!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OmniAuth: Flexible, Unassuming Multi-Provider Authentication for Rack]]></title>
    <link href="http://congmo.github.com/blog/2010/10/03/omniauth-flexible-authentication-for-rack/"/>
    <updated>2010-10-03T00:00:00+08:00</updated>
    <id>http://congmo.github.com/blog/2010/10/03/omniauth-flexible-authentication-for-rack</id>
    <content type="html"><![CDATA[<p>The web application landscape has changed drastically in the past year or two. Where once every site was a silo unto itself and could reasonably expect users to create a unique login and password for each site, it is now a different story. I sigh every time I have to fill out yet another registration form, wishing instead for a simple &#8220;Connect with Facebook&#8221;, &#8220;Sign in with Twitter&#8221;, or &#8220;Log in with OpenID&#8221;. At the same time, services are more interconnected than ever. One of the best ways to increase the popularity and viability of a new service is by piggybacking it onto the existing user bases of apps such as Twitter, Facebook, and Foursquare.</p>

<p>There are lots of authentication solutions out there for Rails. Many of them even have ways to connect to services such as Facebook or Twitter. But as I used these in project after project I noticed an emerging pattern: they all make too many assumptions about how I want to handle authentication in my application. Sure that makes it a quick start for the vanilla use case, but I honestly can&#8217;t think of a time when I&#8217;ve dropped in an authentication solution and I was good to go. It&#8217;s time for a change in perspective.</p>

<p style='float:right;margin:0 0 5px 10px;'><img src='http://img.skitch.com/20101004-mx5x9s6ysnw25jaacgihrrxhdf.png'/></p>

<h3>OmniAuth: The Unassuming Authentication Library</h3>

<p>Today is the public release of <a rel="nofollow" target="_blank" href="http://github.com/intridea/omniauth">OmniAuth</a>. OmniAuth is a Rack-based authentication system that abstracts away the gritty, difficult parts of external authentication without assuming anything about what you actually want to do with that authentication information.</p>

<p>What does this mean for you? This means that you can make your app authenticate through Twitter, Facebook, LinkedIn, Google Apps, GitHub, Foursquare, and more and then <em>have complete control from there</em>.</p>

<h3>Installation</h3>

<p>OmniAuth is available as a gem:</p>

<pre><code>gem install omniauth
</code></pre>

<h3>Diving In</h3>

<p>Using OmniAuth is as simple as using any other Rack middleware. Of course, that&#8217;s because OmniAuth is simply a Rack middleware. No complicated framework-specific configuration, just a collection of middleware to take the pain out of external authentication. Let&#8217;s say I have a Sinatra app that I want to be able to authenticate via Twitter or Facebook. Here&#8217;s what&#8217;s required:</p>

<pre class='ruby'>require 'omniauth'
use Rack::Session::Cookie # OmniAuth requires sessions.
use OmniAuth::Builder do
  provider :twitter, "CONSUMER_KEY", "CONSUMER_SECRET"
  provider :facebook, "APP_ID", "APP_SECRET"
end</pre>

<p>That&#8217;s it! Now if I want to send my user to authenticate via Twitter, I send them to the URL <code>/auth/twitter</code>. For Facebook, <code>/auth/facebook</code>. The user will automatically be redirected to the appropriate site where they will be able to authenticate. Once authentication is complete, they will be redirected back to <code>/auth/providername/callback</code> and OmniAuth will automatically fill the <code>omniauth.auth</code> environment key with information about the user, so for my Sinatra client I just need to add:</p>

<pre class='ruby'>get '/auth/:provider/callback' do
  auth = request.env['omniauth.auth']
  "Hello, #{auth['user_info']['name']}, you logged in via #{params['provider']}."
end</pre>

<p>Of course, I could do a lot more than just print out the user&#8217;s name. I could also:</p>

<ul>
<li>Check for an existing user via the <code>uid</code> key of the auth hash and log them in if one exists.</li>
<li>Create a user based on the <code>uid</code> and information from the <code>user_info</code> hash.</li>
<li>If a user is already logged in, associate this new account with the user so that they can log in using either service or post to both services using respective APIs.</li>
</ul>

<p>The point here is that OmniAuth doesn&#8217;t assume that you simply want to log a user in. It lets you make that judgment call and gives you all the information you need to do just about anything you need to do.</p>

<p>OmniAuth works right now for a wide variety of providers, and this list will continue to grow. OmniAuth today supports:</p>

<ul>
<li>Facebook</li>
<li>Twitter</li>
<li>37signals ID</li>
<li>Foursquare</li>
<li>LinkedIn</li>
<li>GitHub</li>
<li>OpenID (meaning Yahoo, Aol, Google, and many more)</li>
<li>Google Apps (via OpenID)</li>
<li>CAS (Central Authentication Service)</li>
<li>LDAP</li>
</ul>

<h3>A Breath of Fresh Auth</h3>

<p>OmniAuth has been my worst-kept secret library for some time now. I&#8217;ve been using it as the go-to authentication strategy for new projects big and small for the last few months, and it feels really refreshing to have so much control over authentication without losing the drop-in ease of use. If you need external authentication but have found existing solutions to lack flexibility, please take a look!</p>

<p>OmniAuth is <a rel="nofollow" target="_blank" href="http://github.com/intridea/omniauth">on GitHub</a> with a growing set of documentation on the <a rel="nofollow" target="_blank" href="http://github.com/intridea/omniauth/wiki">GitHub wiki</a> and I have also set up a <a rel="nofollow" target="_blank" href="http://groups.google.com/group/omniauth">Google Group</a> to handle any questions that might arise.</p><img src="http://feeds.feedburner.com/~r/intridea/~4/DPyA5QdZvd0" height="1" width="1"/>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Web Developer Goes Native (With Android)]]></title>
    <link href="http://congmo.github.com/blog/2010/09/13/a-web-developer-goes-native-with-android/"/>
    <updated>2010-09-13T00:00:00+08:00</updated>
    <id>http://congmo.github.com/blog/2010/09/13/a-web-developer-goes-native-with-android</id>
    <content type="html"><![CDATA[<p>In the past week I&#8217;ve jumped head-first into Android development for a new Intridea project. This is my first time doing any real Android development as well as my first jump back to Java since I graduated from college. I thought it might be interesting to catalog some of my experiences developing for the platform, so here they are:</p>

<p style='float:right;'><img src="http://img.skitch.com/20100912-xu2q3a9rskk9aj8wappskhh1rr.jpg"/></p>


<h3>Things I Loved</h3>

<p><strong>Intents:</strong> Android is built on an &#8220;Intents&#8221; system. When you want the user to perform some kind of common action, you create an intent for it and activate that intent. Different applications can hook into the same intents, allowing the user to completely customize how they handle a given action.</p>

<p>Wow, what a brilliant system. Android is built from the ground up for insane levels of interoperability between applications. It took no time at all to get a basic QR code scanning process flowing thanks to intents, and the same went for composing e-mails and opening web pages. Literally couldn&#8217;t be simpler.</p>

<p><strong>Activities:</strong> The base unit of an Android application is an activity. An Activity class is what holds the context for your application as well as manages on-screen events and more. One application may have many activities, divided up logically based on user actions.</p>

<p>Once I was able to wrap my head around the idea that any given &#8220;screen&#8221; is really more like an &#8220;activity&#8221; that the user performs, the logic of the application design really fell into place. I think this is a perfect level of abstraction for a mobile platform, and it really made it easy to figure out where to draw the line between one screen and the next.</p>

<p><strong>On-Phone Debugging:</strong> My mouth actually dropped open the first time I plugged my Nexus One in and hit &#8220;Run&#8221; in Eclipse. In just 5-10 seconds my app was launching natively on my phone for me to test. Not only that, but I was still able to see logs and uncaught exceptions as the program ran. Running on the phone is also <strong>lots</strong> faster than running in the emulator.</p>

<p><strong>Resources and NineScale:</strong> Google has come up with a very elegant solution to the idea of handling binary and other resources in Android projects. All of the resources in a directory are pre-compiled into a big reference file called <code>R.java</code> that simply contains access to every menu, image, string, and view that you&#8217;ve created for the application. This makes it so easy to transition between referencing resources in the XML and the code, because it all uses a similar syntax. Great stuff.</p>

<p>When designing views, you will often want to have image-based backgrounds that intelligently stretch to fit their contents. This is called various things in different platforms and tools (NinePatch, NineScale, 9-Slice, etc.). Google&#8217;s implementation is very simple and can be done without extra plugins from any image editor (it&#8217;s just a 1px border around an ordinary <code>.png</code> file). Once again, very cleverly designed.</p>

<p><strong>The Overall Architecture:</strong> Android overall just feels like it was really put together with a lot of thought and care. Everything fits together really well and even people without hardly any desktop or previous mobile application development experience can pick it up relatively quickly. Also, the documentation is pretty extensive (though it would be great to have an even more exhaustive list of code examples of various aspects of the API).</p>

<p style='float:right;'><img src="http://img.skitch.com/20100912-rd3xpgd6ugp51j9jb71tferixy.jpg"/></p>


<h3>Things I Didn&#8217;t Love Quite So Much</h3>

<p><strong>Compiling:</strong> When you&#8217;re used to viewing changes to your application just by clicking &#8220;Refresh&#8221; it can definitely feel like a waste of time to have to compile and run the app. There&#8217;s absolutely nothing that can really be done about this (it is a native app, after all) and Google has gone out of their way to make the process feel as responsive as possible, but it&#8217;s still an unwelcome break in the development cycle for someone used to working on web apps.</p>

<p><strong>Where&#8217;s My CSS?</strong> I&#8217;m guessing that some people will disagree with me here, but wow did I ever miss CSS when building an Android application. CSS makes it <strong>so easy</strong> to rapidly and iteratively style things. Android has a few ways to style things that definitely help over repetitive copy and paste XML attributes, but the expressiveness and power of CSS is sorely missing from building interfaces in Android.</p>

<p><strong>Exceptions:</strong> When running an application in the emulator or on the phone, I really wanted a clear and easy way to view stack traces. The LogCat view on Eclipse is the way to do this, but I found a few problems with it:</p>

<ol>
<li>The stack traces don&#8217;t list the exception you&#8217;re looking for at the top of the trace, but rather about half-way down. Takes a while to wade through and figure out what to look at.</li>
<li>When I tried to use the debugger, I never got any useful output or link-to-line type help that I expected from a fully integrated IDE. Maybe I was using it wrong, but it didn&#8217;t help me out much.</li>
</ol>


<p><strong>Java:</strong> OK, OK, could take some flak for this one, but after developing full-time with Ruby for more than three years now, going back to Java feels like an unbearable chore. There&#8217;s so much boilerplate code and I found myself really missing the simple, expressive, concise idioms of Ruby. Maybe once <a href="http://www.mirah.org/">Mirah</a> gets a little more mature I can at least ease that part of the Android experience.</p>

<p><strong>SQLite:</strong> I know that it&#8217;s the go-to solution for small, simple storage, but <em>why on earth do mobile platforms have schema-driven data stores by default</em>? What a ridiculously square peg to pound into the round hole of mobile data persistence. You know what the default data store for mobile ought to look like? <a href="http://code.google.com/p/redis/">Redis</a>. If I had the simple data structure support provided in Redis (key-value, lists, and sets with simple combinatorial commands), I wouldn&#8217;t need anything more for 99.9% of the applications I can think of. SQL is an awful, terrible fit for mobile and I hope that one day someone realizes it.</p>

<p>I&#8217;m glad to see that <a href="http://www.couch.io/android">CouchDB</a> is trying to disrupt this space a little, and I hope that the disruption continues with more datastores and more choices being available for mobile development.</p>

<h3>Wrapping Up</h3>

<p>It was certainly an interesting week and I&#8217;ve been learning a lot. Android development is starting to come more naturally (looking things up on the API docs maybe every 5 minutes instead of every 30 seconds) and I&#8217;m actually starting to enjoy myself. It&#8217;s really satisfying building something that I can immediately run on my Nexus One, and I definitely look forward to working more with the platform in the future.</p>

<p>That being said, I don&#8217;t think I would choose to develop for mobile applications as my primary focus. While mobile development is certainly rapid compared to old-school desktop development, I still don&#8217;t think anything can match the ease and speed with which web applications can be developed. Since I&#8217;m ultimately more interested in ideas and solving the big-picture puzzles of applications than the low-level implementation details, web is still the place to be for me (for now).</p>

<p>And so we&#8217;ve reached the end of this rather wordy spiel; hopefully if you&#8217;re a web developer you can read this and get some idea of what it would be like to dive into mobile development, and if you&#8217;re already a mobile developer maybe you can tell me how I&#8217;m all wrong about everything I&#8217;ve just written. And maybe, just maybe, if you work for Google you&#8217;ll implement Redis as the primary datastore for Android 3.0. Hey, a guy can hope, can&#8217;t he?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[On Android and Custom UIs]]></title>
    <link href="http://congmo.github.com/blog/2010/06/22/on-android-and-custom-uis/"/>
    <updated>2010-06-22T00:00:00+08:00</updated>
    <id>http://congmo.github.com/blog/2010/06/22/on-android-and-custom-uis</id>
    <content type="html"><![CDATA[<p style='float: right; margin: 0 0 0 10px;'><img src='http://img.skitch.com/20100619-jy7ypsc6ws35ikjs3xcd6rasmc.jpg' alt='Android UI Fragmentation'/></p>
<p>Google&#8217;s Android has seen an incredible rise in popularity since its first handset was launched less than two years ago. Google has worked hard to earn that popularity, regularly releasing fantastic new improvements to the platform in the form of Donut, Eclaire, and now Froyo. Unfortunately, many users of the Android ecosystem won&#8217;t see these improvements for years, if at all. The reason? Manufacturers of Android handsets are building custom versions of the OS to add eye-candy and make the UI seem more attractive, at the expense of upgradeability.</p>
<p><span class="caps">HTC</span> has its <strong>Sense UI</strong> and Motorola has <strong><span class="caps">MOTOBLUR</span></strong>. Samsung and Sony have also thrown their hats into the &#8220;heavily modified UI&#8221; ring. While these packages may serve to help differentiate from the competition, they are hammering the Android ecosystem by causing fragmentation (and yes, <a href="http://android-developers.blogspot.com/2010/05/on-android-compatibility.html">I do think that&#8217;s the right word</a>). But it isn&#8217;t all their fault. One can certainly understand how, when competing against the likes of the iPhone, manufacturers would want to &#8220;pretty up&#8221; the Android experience. So I&#8217;ve got a few words for these OEMs, and Google as well.</p>
<h3>Dear Google</h3>
<p>I&#8217;m really happy that you&#8217;re <a href="http://www.androidguys.com/2010/06/18/android-team-shifting-focus-user-experience-gingerbread/">&#8216;laser focused&#8217; on the user experience</a> for the next release. Now that you&#8217;ve got it humming at lightning speed with Froyo, it&#8217;s time to add some polish. Fantastic. But making a better stock UI isn&#8217;t the only thing that needs to happen to prevent this fragmentation.</p>
<p>You should be doing everything you can to prevent version fragmentation because it&#8217;s hurting developers and consumers. When people with G1s see &#8220;official Android Twitter client released&#8221; but can&#8217;t download it, they&#8217;ll get frustrated. They don&#8217;t know or care about the fact that the G1&#8217;s limited internal storage means that it <strong>can&#8217;t</strong> get the next upgrade, they only care that they&#8217;re supposed to have an Android but they can&#8217;t get the software they want.</p>
<p>Here&#8217;s my advice: take the feature lists of Sense and <span class="caps">MOTOBLUR</span> et al as a laundry list of areas where your <span class="caps">API</span> needs more robustness. If the capabilities of Sense and <span class="caps">MOTOBLUR</span> were exposed at an application level, this problem would simply disappear. You&#8217;ve built your platform to be backwards-compatible; if <span class="caps">HTC</span> wants to build a &#8220;Sense UI&#8221; app that changes the appearance of the UI and adds a bunch of widgets, and they want to make that only available on their handsets, more power to them. When the next version of Android comes out, it&#8217;ll all work seamlessly because they&#8217;ve simply <strong>built an app</strong>, like any other developer.</p>
<p>So keep up the good work on Gingerbread, I&#8217;m looking forward to the UI improvements. But also make your UI reachable by applications, provide hooks into the very guts of Android so that manufacturers and developers alike can really &#8220;make it their own&#8221; without building a custom <span class="caps">ROM</span>.</p>
<h3>Dear <span class="caps">HTC</span>/Motorola/Samsung/Etc.</h3>
<p>Thank you for making Android handsets. I&#8217;m a huge supporter of the platform, and the level of competition and innovation on Android phones has been amazing. Keep it up! But you&#8217;re doing yourselves a disservice by building these custom UIs that inhibit the Android version upgrade process.</p>
<p>Google has huge teams of people working to continuously upgrade the Android experience. You get the fruits of this labor <strong>100% for free</strong>. I understand that as a handset manufacturer the idea of upgradeable phones isn&#8217;t necessarily the most appealing: if people can upgrade the software on their phones, maybe they won&#8217;t want a new one in 2 years! But trust me, you&#8217;ve shown that you&#8217;ll make the hardware good enough that people <em>will</em> want new phones.</p>
<p>Instead of locking down a handset to a specific Android version, create an unbeatable suite of <em>applications</em> that comes pre-loaded on your phone. Work on top of, instead of within, the Android operating system. Then you can leverage all of Google&#8217;s work and all of your own work to provide customers with a great experience. Work with Google to add pieces of <span class="caps">API</span> that will help you provide all of the value you want to provide; I&#8217;m sure Google would be happy to help as best it can.</p>
<p>Also, while I&#8217;m at it, can one of you please create a 4.3&quot; handset running the stock Froyo UI sometime before November? I&#8217;d love to get a big-screen phone when my contract&#8217;s up, but I don&#8217;t know that I can handle dealing with these custom UI jobs. It&#8217;s just not for me.</p>
<h3>Unicorns and Rainbows</h3>
<p>I think that Android is a very important project that came along at just the right time. It has applications far beyond mobile handsets and we&#8217;ll begin seeing Android in cars, tablets, and more in the very near future. This will mean <em>even more</em> work will be poured into the Android ecosystem creating greater and greater benefits for everyone from consumers to handset manufacturers. All that needs to happen to take advantage of those benefits is for Google to help handset manufacturers free themselves of the idea that they need to &#8220;make it their own&#8221;.</p>
<p>I&#8217;m looking forward to the next 40 Android phones, and the 100 after that. I truly think that Android is going to dominate the mobile market five years from now (Apple will still have about the same piece of the pie, but Android will have displaced <span class="caps">RIM</span> and Microsoft entirely). So keep up the good work, but how about we all just get along in the meantime.</p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MultiJSON: The Swappable JSON Handler]]></title>
    <link href="http://congmo.github.com/blog/2010/06/14/multi-json-the-swappable-json-handler/"/>
    <updated>2010-06-14T00:00:00+08:00</updated>
    <id>http://congmo.github.com/blog/2010/06/14/multi-json-the-swappable-json-handler</id>
    <content type="html"><![CDATA[<p><span class="caps">JSON</span> has become ubiquitous. From Facebook and Twitter both declaring it to be the preferred (and in some cases only) option for <span class="caps">API</span> access to the new OAuth 2.0 draft spec declaring that <span class="caps">JSON</span> is the only acceptable response format for OAuth token responses, <span class="caps">JSON</span> is here to stay. What isn&#8217;t ubiquitous, however, are people&#8217;s preferred implementations.</p>
<p>As library authors it is our duty to try to support as large a part of the community as possible and do so in a friendly manner. To that end, today we&#8217;re releasing <strong>MultiJSON</strong>, a simple library that allows you to seamlessly provide multiple <span class="caps">JSON</span> backends for your library with intelligent defaulting. Install with a simple <code>gem install multi_json</code> and then get started like so:</p>
<div>
<pre><code class='ruby'>require 'multi_json'
<ol>
	<li>Decode using default engine.<br />
MultiJson.decode(&#8216;{&quot;abc&quot;:&quot;def&quot;}) # =&gt; {&quot;abc&quot; =&gt; &quot;def&quot;}&#8217;)</li>
</ol>
<ol>
	<li>Set an engine using a symbol.<br />
MultiJson.engine = :active_support</li>
</ol>
<ol>
	<li>Encode using ActiveSupport<br />
MultiJson.encode({:abc =&gt; &quot;def&quot;}) # =&gt; &#8216;{&quot;abc&quot;:&quot;def&quot;}&#8217;</code></pre><br />
</div></li>
</ol>
<p>This gem is primarily for library authors, allowing you to use the best <span class="caps">JSON</span> available on the users&#8217; systems without explicitly requiring one library over another. This way you can be sure that your <span class="caps">JSON</span> handling will work across implementations (e.g. JRuby) as well as requiring as little extra code as possible (the gem detects existing libraries before requiring more by default).</p>
<p>Engines supported by default are:</p>
<ul>
	<li><code>yajl-ruby</code></li>
	<li><code>json</code> (gem)</li>
	<li><code>active_support</code></li>
	<li><code>json_pure</code></li>
</ul>
<p>We hope that this will make development of <span class="caps">JSON</span>-relying libraries a little bit less of a headache for library authors and users alike. The code is, as always, <a href="http://github.com/intridea/multi_json">available on GitHub</a>.</p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AuthButtons: Free and Open Source Web App Icons]]></title>
    <link href="http://congmo.github.com/blog/2010/06/01/authbuttons-free-open-source-web-app-icons/"/>
    <updated>2010-06-01T00:00:00+08:00</updated>
    <id>http://congmo.github.com/blog/2010/06/01/authbuttons-free-open-source-web-app-icons</id>
    <content type="html"><![CDATA[<p>More and more web applications are providing external logins through sites such as Twitter, Facebook, and more.  It can be a bit of a pain to assemble suitable buttons for all of these services to display as the &#8220;<span class="caps">NASCAR</span> box&#8221; of logos for users to click when signing up or on to a site.</p>
<p>To make this a little bit easier, Intridea is releasing a collection of free and open-source logo buttons for use, well, however you&#8217;d like, but probably for these types of authentication scenarios. This collection is starting with twelve buttons:</p>
<p align='center'><a href='http://github.com/intridea/authbuttons' style='border:none'><img src='http://img.skitch.com/20100601-r69wti94eepdcb8ti3y6areqqi.jpg' alt='Logo Images'/></a></p>
<p>The initial set created are for Twitter, Facebook, Myspace, OpenID, Google, Yahoo, Basecamp, Campfire, Present.ly, Aol, LinkedIn, and GitHub.</p>
<p>This collection will grow over time as we get suggestions (or forks) of new iconography. The idea is simply to provide a clean, consistent set of icons that can be used to represent some of the web&#8217;s most popular services. Each icon is available in 32&#215;32, 64&#215;64, 128&#215;128, and 256&#215;256 PNGs as well as an Illustrator CS4 source file that contains all of the buttons and individual CS3 .<span class="caps">EPS</span> files that contain each button individually.</p>
<p>To see a full download grid for each icon, visit the <a href="http://github.com/intridea/authbuttons">GitHub Project Page</a>. If you have a logo you&#8217;d like to see included, please add a request for it to the <a href="http://github.com/intridea/authbuttons/issues">GitHub Issues Page</a></p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[REST isn't what you think it is (and that's OK)]]></title>
    <link href="http://congmo.github.com/blog/2010/04/29/rest-isnt-what-you-think-it-is/"/>
    <updated>2010-04-29T00:00:00+08:00</updated>
    <id>http://congmo.github.com/blog/2010/04/29/rest-isnt-what-you-think-it-is</id>
    <content type="html"><![CDATA[<p>Everyone says they have a <span class="caps">REST</span> (or RESTful or <span class="caps">REST</span>-like) <span class="caps">API</span>. <a href="http://apiwiki.twitter.com/REST-API-Documentation">Twitter does</a>, <a href="http://wiki.developers.facebook.com/index.php/API">Facebook does</a>, as does <a href="http://www.twilio.com/docs/api/2008-08-01/rest/">Twilio</a> and <a href="http://gowalla.com/api/docs">Gowalla</a> and even <a href="http://code.google.com/apis/ajaxsearch/documentation/#fonje">Google</a>. However, by the actual, original definition, none of them are truly RESTful. But that&#8217;s OK, because your <span class="caps">API</span> shouldn&#8217;t be either.</p>
<h3>The Common Definition</h3>
<p>The misconception lies in the fact that, as tends to happen, the popular definition of a technical term has come to mean something entirely different from its original meaning. To most people, being RESTful means a few things:</p>
<ol>
	<li>Well-defined URIs that &#8220;represent&#8221; some kind of resource, such as &#8220;/posts&#8221; on a blog representing the blog posts.</li>
	<li><span class="caps">HTTP</span> methods being used as verbs to perform actions on that resource (i.e. <code>GET</code> for read operations and <code>POST</code> for write operations).</li>
	<li>The ability to access multiple format representations of the same data (i.e. both a <span class="caps">JSON</span> and an <span class="caps">XML</span> representation of a blog post).</li>
</ol>
<p>There are some other parts of the common vocabulary of <span class="caps">REST</span> (for example, for some developers being RESTful would also imply a <span class="caps">URI</span> hierarchy such that <code>/posts/{uniqueid}</code> would be seen to be a member of the <code>/posts</code> collection), but these are what most people think of when they hear &#8220;RESTful web service.&#8221; So how is this different from the &#8220;actual&#8221; definition of <span class="caps">REST</span>?</p>
<h3>Diverging From Canon</h3>
<p>By the common definition of <span class="caps">REST</span>, a service defines a set of resources and actions that can be accessed via <span class="caps">URI</span> endpoints. However, the &#8220;true&#8221; definition of <span class="caps">REST</span> demands that resources be self-describing, providing all of the control context in-band of the provided representation. No out-of-band knowledge should, therefore, be required beyond understanding a media type that the resource can provide. From there, it should be possible to follow relations provided in &#8220;hypertext&#8221; context of the representation to &#8220;transfer state&#8221;, follow relations, or perform any necessary actions.</p>
<p>Another common divergence comes through the practice of using <span class="caps">HTTP</span> <code>POST</code> (or <code>PUT</code>) bodies with key-value pairs to create and update documents. In a canonically RESTful service clients should be posting an actual representation of the document in an accepted media type that is then parsed and translated by the service provider to create or update the resource.</p>
<p>Still more divergence comes in the common practice of denoting collections and elements. A truly RESTful web service has no concept of a &#8220;collection&#8221; of resources. There are only resources. As such, the proper way to implement a collection would be to define a separate resource that represents a collection of other resources.</p>
<h3>Is anything truly RESTful?</h3>
<p>Pretty much everyone who claims to have a <span class="caps">REST</span> <span class="caps">API</span>, in fact, does not. The closest I&#8217;ve found is the <a href="http://kenai.com/projects/suncloudapis/pages/Home">Sun Cloud <span class="caps">API</span></a> which actually defines a number of custom media types for resources and is discoverable based on a single known end-point. Everyone else, thanks for playing.</p>
<p>There is, however, one public and <strong>extremely</strong> widely used system that is entirely RESTful. It&#8217;s called the world wide web. Yes, as you&#8217;re browsing the internet you&#8217;re engaging in a <span class="caps">REST</span> service by the true definition of the name. Does your browser (the client) know whether it&#8217;s displaying a banking website or a casual game? Nope, it just utilizes standard media types (<span class="caps">HTML</span>, <span class="caps">CSS</span>, Javascript) to compose and represent the data. You don&#8217;t have to know the specific <span class="caps">URL</span> you&#8217;re looking for on a website so long as you know the &#8220;starting place&#8221; (usually the domain name) and can navigate there.</p>
<p>So <span class="caps">REST</span> by its original definition is far from useless. In fact, it&#8217;s an ingenious and flexible way to allow for the consumption and traversal of network-available information. What it&#8217;s not, however, is a very good roadmap toward building APIs for web applications.</p>
<h3>Real <span class="caps">REST</span> is too hard.</h3>
<p>Truly RESTful services simply require too much work to be practical for most applications. Too much work from the provider in defining and supporting custom media types with complex modeled relationships transmitted in-band. Too much work for clients and library authors to perform complex aggregation and re-formulation of data to make it conform to the real <span class="caps">REST</span> style. Real <span class="caps">REST</span> is great for generic, broad-encompassing multi-provider architectures that need the flexibility and discoverability it provides. For most application developers it&#8217;s simply overkill and a real implementation headache.</p>
<p>There&#8217;s nothing wrong with the common definition of <span class="caps">REST</span>. It&#8217;s leaps and bounds better than some of the methods that came before it and pretty much everyone is already on board and familiar with how it works. It&#8217;s a pragmatic solution that really works pretty well for everyone. As they say, if it ain&#8217;t broke, don&#8217;t fix it.</p>
<h3>What&#8217;s in a name?</h3>
<p>The only problem is that now we have lots of things that we&#8217;re calling <span class="caps">REST</span> that aren&#8217;t. Roy T. Fielding, primary architect of <span class="caps">HTTP</span> 1.1 and the author of the dissertation that originally defines <span class="caps">REST</span>, <a href="http://roy.gbiv.com/untangled/2008/rest-apis-must-be-hypertext-driven">hasn&#8217;t always been happy with people calling things <span class="caps">REST</span> that aren&#8217;t</a>. And maybe he has a point: these services certainly aren&#8217;t <span class="caps">REST</span> by his definition and because of the wide propagation of this incorrect definition of <span class="caps">REST</span> most people now don&#8217;t really understand the true definition. In fact, I don&#8217;t claim to have a great understanding of <span class="caps">REST</span> as Dr. Fielding defines it.</p>
<p>The problem is that the ship has sailed, and whether it&#8217;s true or not, <span class="caps">REST</span> now <strong>also</strong> means any simple, <span class="caps">URL</span>-accessible resource-based service. Perception is reality, and perception has changed about the definition of <span class="caps">REST</span> and RESTful. While the true definition is interesting for academic purposes and certainly lies behind the technologies upon which we build every day, it simply doesn&#8217;t have a whole lot of use to web application developers. The fact that (nearly) zero services exist that implement true <span class="caps">REST</span> for their <span class="caps">API</span> serves as testament to that.</p>
<h3>What can we learn from <span class="caps">REST</span>?</h3>
<p>Just because we don&#8217;t use true <span class="caps">REST</span> doesn&#8217;t mean there aren&#8217;t a few things we can learn from it. There are a few aspects that I&#8217;d love to see come into favor in the common definition. The idea of clients needing to know a few media types instead of specific protocols for each service is one that breaks down in practice for APIs due to the overwhelming number of web services with different needs in terms of domain-specific resource definition. However, wouldn&#8217;t it be great if there were an accepted  <code>application/x-person+json</code> format that provided a standardized batch of user information (such as name, e-mail address, location, profile image <span class="caps">URL</span>) that you could request from Facebook, Twitter, Google or any OpenID provider and expect conforming data? Just because there are lots of domain-specific resources doesn&#8217;t mean that it isn&#8217;t worthwhile to try to come up with some standards for common information.</p>
<p><span class="caps">REST</span>-like discoverability could also be a boon for some services. What if Twitter provided something like this along with a tweet&#8217;s <span class="caps">JSON</span>?</p>
<pre name='code' class='json'>{
  "actions": {
    "Retweet" : { "method":"POST", url:"/1/statuses/retweet/12345.json" },
    "Delete" : { "method":"DELETE", url:"/1/statuses/destroy/12345.json" },
    "Report Spam" : { "method":"POST", url:"/1/statuses/retweet/12345.json", params:{"id":12345} }
  }
}</pre>
<p>So while <span class="caps">REST</span> as originally intended may not be a great fit for web applications, there are still patterns and practices to be gleaned from a better understanding of how such a service could work. For web applications, the case may be that <span class="caps">REST</span> is dead, long live <span class="caps">REST</span>!</p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Future's Pretty Cool (or Why I Love Ruby)]]></title>
    <link href="http://congmo.github.com/blog/2010/04/28/the-futures-pretty-cool/"/>
    <updated>2010-04-28T00:00:00+08:00</updated>
    <id>http://congmo.github.com/blog/2010/04/28/the-futures-pretty-cool</id>
    <content type="html"><![CDATA[<p>There have been tons of comparisons between Ruby and other languages (mostly Python) ranging from the <a href="http://c2.com/cgi/wiki?PythonVsRuby">technical</a> to the <a href="http://blog.extracheese.org/2010/02/python-vs-ruby-a-battle-to-the-death.html">epically titled</a>. I&#8217;ve always felt that both languages are nice, but feel much more at home with the expressive, readable Ruby syntax. And don&#8217;t get me wrong, I love Ruby for all kinds of language reasons. Re-openable classes, blocks and the general meta-programming <span class="caps">DNA</span> of Ruby make it just wonderfully powerful and useful for me as a developer. However, when I think about it the language is really only half the story when it comes to why I love being a Ruby developer.</p>
<p style="float:right; margin:0 0 10px 15px;"><a href='http://xkcd.com/442/' title='I Love The Lisp Chainsaw'><img src='http://img.skitch.com/20100427-nwyu72qkhxhking8626aeixkys.png' alt="XKCD The Future's Pretty Cool"/></a></p>
<p>Whether it&#8217;s inherent in the makeup of the language and those to whom it appeals or the &#8220;buck the mainstream&#8221; attitude of Rails&#8217;s opinionated-ness, Rubyists tend to take to new things like fish to water. An outsider may look at the insane progression of testing frameworks and other different-ways-to-do-the-same-thing and think it&#8217;s a kind of madness, sickness, or chaos. Well, I suppose it is. However, living inside the Ruby hurricane has helped me to grow as a developer more than I could possibly have imagined in the few years I&#8217;ve been doing it full time. Thanks to Ruby, I was on board with these technologies months or even years before I feel I otherwise would have been (just a few examples):</p>
<ul>
	<li><strong>Test-Driven Development:</strong> Already a mainstay in the Ruby community when I joined it, <span class="caps">TDD</span> has seen some pretty rapid expansion into other languages and communities. I&#8217;m not saying Ruby was the first or only, but it was certainly an early and strong <span class="caps">TDD</span> community.</li>
	<li><strong>Distributed Version Control:</strong> <a href="http://github.com/">GitHub</a> is the future not only of project version control but of open-source collaboration. SourceForge by comparison seems like a lumbering dinosaur. Fork, fix, push.</li>
	<li><strong>NoSQL:</strong> I was playing with CouchDB about a year ago, not realizing that soon it would be a player in the biggest developer flamewar since Vim vs. Emacs.</li>
</ul>
<p>I&#8217;m not trying to say that X language doesn&#8217;t promote innovation or adoption of new ideas or Y has an inferior community. This isn&#8217;t a comparison post. I just know that when it comes to new technologies, most Rubyists I know are already jumping out of the plane while still trying to figure out how the parachute works. That sounds like an insult, but I think it&#8217;s amazing. We have a community of people so excited about technology that they literally can&#8217;t wait to build on it or for it, and share it with others. The huge proliferation of regional Ruby conferences speaks to this: we&#8217;re a group of people so intensely interested in learning about what&#8217;s new that we can&#8217;t manage holding just a few mainstream conferences each year.</p>
<p>For me, being a part of the Ruby community feels like getting a sneak peek at where software development is going six months to two years from now. That&#8217;s not to say it&#8217;s all rainbows and daisies&#8230;the constantly changing landscape requires a real passionate dedication to keep up or you&#8217;ll quickly fall behind, and not all technologies are meant to immediately be deployed to massive-scale production environments (restraint is a skill a good Rubyist must learn and exercise on a regular basis). But I love Ruby because I feel confident that I will be made aware of trends in software development long before I would otherwise be expected to understand them.</p>
<p>It&#8217;s fun to live in the future.</p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Facebook is the Private Beta of the Semantic Web]]></title>
    <link href="http://congmo.github.com/blog/2010/04/23/facebook-is-the-private-beta-of-the-semantic-web/"/>
    <updated>2010-04-23T00:00:00+08:00</updated>
    <id>http://congmo.github.com/blog/2010/04/23/facebook-is-the-private-beta-of-the-semantic-web</id>
    <content type="html"><![CDATA[<p>Facebook recently announced their intentions to become the center of the universe for online identity and social connections. While the new functionality of the Facebook Open Graph is exciting and represents a real glimpse into the interconnected semantic web, it has also sparked <a href="http://thefastertimes.com/mediaandtech/2010/04/22/my-facebook-problem-and-yours/">numerous</a> <a href="http://blog.jakerlevine.com/post/539731920/if-facebook-is-an-open-platform-then-the-web-is-a">concerns</a> about placing so much power into the hands of a single company. As it turns out, not everyone on earth is content with having their Facebook profile be the only representation of their identity on the web. To those sweating over the level of control and power this gives Facebook, I say:</p>
<p align='center'><img src='http://img.skitch.com/20100423-jepjp1x576hxfii15ixfxyuacr.png' alt="Don't Panic!"/></p>
<p>Yes, if Facebook perpetually controlled identity and semantic &#8220;Liking&#8221; that would be very bad for the web as a community. And it seems like it will be difficult to overcome the hurdle of that damn &#8220;Like&#8221; button on every page on the internet, right? I mean, sites aren&#8217;t going to want a <span class="caps">NASCAR</span> array of &#8220;Like&#8221; buttons cluttering up the place. How can anyone be expected to compete with Facebook&#8217;s 400 million user promise?</p>
<h3>Terraforming the Web</h3>
<p style='float: right; margin: 0 0 10px 15px'><img src='http://img.skitch.com/20100423-ba4c3fd8ifg7pwwh3w7c7cfbum.png' alt='Terraforming in Action!'/></p>
<p>We should really all be thanking Facebook for what they&#8217;re doing. They&#8217;re essentially the first colonization spaceship sent out to the world wide web, a rough-and-tumble wild west crew that gets to make their own rules because they&#8217;re doing the pioneering. And while their approach may smack of self-interest, you have to realize it could have been so much worse.</p>
<p>The acquisition of FriendFeed seems to be the best thing that could possibly have happened to Facebook, because rather than the openness of FriendFeed being subsumed by the closed past of Facebook, the FriendFeed team seems to have done the impossible: they&#8217;ve convinced Facebook to participate in the broader conversation about open standards (even if tentatively).</p>
<p>The result of Facebook&#8217;s Open Graph push will basically terraform the web, reshaping it into something new where semantic applications can thrive. Of course Facebook is doing this all for their own benefit&#8230;why shouldn&#8217;t they? But they&#8217;re also doing it in such a way that they simply will not have control of it forever. So how can this shake out for the best? How can an open protocol with a proprietary &#8220;Like&#8221; button become the open, semantic web that many dream of? Simple. Browsers.</p>
<h3>Firefox and Chrome are the Key</h3>
<p>Ultimately the interaction with the semantic web doesn&#8217;t belong on the website to begin with. That&#8217;s Web 2.0 thinking. What we&#8217;re going to see in the next months and years is a move of semantic activity and identity being handled in the browser, either explicitly by the vendor or through extensions on their platform. <a href="http://www.azarask.in/blog/post/identity-in-the-browser-firefox/">Mozilla is already experimenting with this</a>, and I would bet Google has some ideas of their own along the same lines.</p>
<p style='float: left; margin: 0 15px 10px;'><img src='http://img.skitch.com/20100423-ggpf2ucd5r8hx9mhnqbpxjir3a.png' alt='Browser Icons'/></p>
<p>So while Facebook may get to own the &#8220;Like&#8221; button on the page, once every browser comes with a &#8220;Like&#8221; button that connects to any number of services according to an open protocol, once I can log into a site using identity stored in my browser and skip the Facebook authorization dance, the semantic web will be realized in full. And the great thing is, everyone will have all of the data they need to build such services thanks to the aggressive partnerships pursued by Facebook.</p>
<p>In essence, <strong>everything</strong> that Facebook announced at F8 ultimately belongs in the browser, not through a single connection to a proprietary service. And the great thing is that not only is that the better solution for proponents of the open web, but it&#8217;s also <strong>even easier than Facebook</strong> for users of the browsers that eventually gain these features. Facebook has always won the war for identity based on convenience, but nothing is more convenient than the tools built in to my browser of choice.</p>
<p>So thanks, Facebook, for launching the private beta of the semantic web. I can&#8217;t wait to see what happens when it goes public.</p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Announcing the OAuth2 Gem]]></title>
    <link href="http://congmo.github.com/blog/2010/04/22/oauth2-gem/"/>
    <updated>2010-04-22T00:00:00+08:00</updated>
    <id>http://congmo.github.com/blog/2010/04/22/oauth2-gem</id>
    <content type="html"><![CDATA[<p>While I&#8217;d been tracking with great interest the progress of OAuth 2.0, Facebook lit off the powderkeg yesterday by announcing that their entire <span class="caps">API</span> was moving to the protocol (as well as to RESTful <span class="caps">JSON</span>). As a developer who had been constantly confounded by the relentlessly hostile environment that Facebook seemed to present to developers, yesterday was a sudden and welcome about-face. The acquisition of <a href="http://friendfeed.com/">FriendFeed</a>, it seems, gave Facebook the talent they needed to do it right this time.</p>
<p>But anyway, on to the news! We have just released a gem for OAuth 2.0 to work with the new Facebook <span class="caps">API</span>. You can get it right now:</p>
<pre>gem install oauth2</pre>
<p>We wanted to get this into the hands of developers <span class="caps">ASAP</span> so for now the functionality is pretty much limited to the &#8220;web server&#8221; type of authentication (the protocol includes many different strategies, all of which will be implemented on the gem over time) and has been tested to work with <a href="http://developers.facebook.com/docs/api#authorization">Facebook&#8217;s new <span class="caps">API</span></a>.</p>
<p>So how do you use it? Here is an example Sinatra application containing all of the code necessary to authenticate and then perform requests against the Facebook <span class="caps">API</span>.</p>
<pre name='code' class='ruby'>require 'rubygems'
require 'sinatra'
require 'oauth2'
require 'json'

def client
  OAuth2::Client.new('api_key', 'api_secret', :site =&gt; 'https://graph.facebook.com')
end

get '/auth/facebook' do
  redirect client.web_server.authorize_url(
    :redirect_uri =&gt; redirect_uri, 
    :scope =&gt; 'email,offline_access'
  )
end

get '/auth/facebook/callback' do
  access_token = client.web_server.get_access_token(params[:code], :redirect_uri =&gt; redirect_uri)
  user = JSON.parse(access_token.get('/me'))

  user.inspect
end

def redirect_uri
  uri = URI.parse(request.url)
  uri.path = '/auth/facebook/callback'
  uri.query = nil
  uri.to_s
end</pre>
<p>So now you&#8217;re ready to get started with the new Facebook <span class="caps">API</span>! This is still an early release, but I&#8217;ll be working on it a lot in the coming months, partially as preparation for my <a href="http://en.oreilly.com/rails2010/public/schedule/detail/14071">talk at RailsConf</a> in which I&#8217;ll be delving into the OAuth 2.0 specification and what it means for Rails developers in-depth. The code is, of course, <a href="http://github.com/intridea/oauth2">available on GitHub</a> where you can report any problems you run into. Enjoy!</p>
<p><strong>Update:</strong> Those who aren&#8217;t terribly familiar with the protocol may wonder why OAuth 2.0 isn&#8217;t just rolled into support of the OAuth gem (or why I didn&#8217;t fork it and do it that way). Honestly, I would have liked to, but OAuth 2.0 is an almost entirely different beast than 1.0a and they share so little functionality that it would basically be two projects living under the same gem name. So that&#8217;s why!</p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby Quick Tip: Instant Utility Modules]]></title>
    <link href="http://congmo.github.com/blog/2010/04/19/ruby-quick-tip-instant-utility-modules/"/>
    <updated>2010-04-19T00:00:00+08:00</updated>
    <id>http://congmo.github.com/blog/2010/04/19/ruby-quick-tip-instant-utility-modules</id>
    <content type="html"><![CDATA[<p>Sometimes you want to write a batch of utility methods that can be accessed from a module for example <code>Utility.parse_something(string)</code> or any number of useful little tools for your application. Here&#8217;s a very clean-looking way to achieve it:</p>
<pre name='code' class='ruby'>module Utilities
  extend self

  def parse_something(string)
    # do stuff here
  end

  def other_utility_method(number, string)
    # do some more stuff
  end
end</pre>
<p>By placing <code>"extend self"</code> at the top of the module, you are telling it to include all of the methods defined on your module as class methods on&#8230;your module. Which means that you can now access them like other class methods! While there are other ways to do this, I think this is a very semantically clean way that gets it done quite nicely.</p>
<p><strong>Update:</strong> And this is exactly why I post these Quick Tips, because sometimes there&#8217;s another solution that I hadn&#8217;t heard of! Using Ruby&#8217;s <code>module_function</code> you can achieve the same effect:</p>
<pre name='code' class='ruby'>module Utilities
  module_function
  
  def parse_something(string)
    # do stuff here
  end

  def other_utility_method(number, string)
    # do some more stuff
  end
end</pre>
<p>The <code>module_function</code> method either takes multiple symbols as arguments for the methods to turn into module methods or, if invoked without arguments, will cause all subsequent methods to be defined as module functions. You can <a href="http://ruby-doc.org/core/classes/Module.html#M001642">read the Ruby documentation about it here</a>. Ultimately I&#8217;m not sure which I&#8217;d go with, as <code>module_function</code> is pretty esoteric (I&#8217;ve never come across it in code that I&#8217;ve read), but so is <code>extend self</code>. It&#8217;s your call, developers!</p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Toggle CSS3 Bookmarklet]]></title>
    <link href="http://congmo.github.com/blog/2010/04/12/toggle-css3-bookmarklet/"/>
    <updated>2010-04-12T00:00:00+08:00</updated>
    <id>http://congmo.github.com/blog/2010/04/12/toggle-css3-bookmarklet</id>
    <content type="html"><![CDATA[<p>If you&#8217;ve begun to use CSS3 experimental features in your sites lately such as <code>box-shadow</code>, <code>border-radius</code> or <code>text-shadow</code>, you know how much pain it can take away from the design process. Unfortunately, lots of people are still using Internet Explorer and can&#8217;t see all these pretty additions you&#8217;ve added.</p>
<p>I thought it would be useful to have a simple way to run a sanity check on my design to make sure it wasn&#8217;t going to look awful or unreadable once all of the CSS3 goodies were taken away. With that in mind, I created a bookmarklet that will toggle the display of all of that modern goodness.</p>
<p>Just drag this link: <a href="javascript:void(function(){if(document.getElementById('uncss3')){var uncss=document.getElementById('uncss3');uncss.parentNode.removeChild(uncss);}else{var css='* { -moz-border-radius: 0 !important; -webkit-border-radius: 0 !important; border-radius: 0 !important; -webkit-box-shadow: none !important; -moz-box-shadow: none !important; box-shadow: none !important; -moz-border-image: none !important; -webkit-border-image: none !important; border-image: none !important; text-shadow: none !important; -webkit-background-origin: border-box !important; -moz-background-origin: border-box !important; background-origin: border-box !important; -moz-background-clip: border-box !important; -webkit-background-clip: border-box !important; background-clip: border-box !important; }';var uncss=document.createElement('style');uncss.setAttribute('type','text/css');uncss.setAttribute('id','uncss3');uncss.innerText=css;document.getElementsByTagName('head')[0].appendChild(uncss);}})();">Toggle CSS3</a> into your bookmark toolbar. Then, by clicking it, you can turn off (and back on) the most common CSS3 improvements. Once installed, if you visit a page such as <a href="http://www.css3.info/preview/box-shadow/">CSS3.info</a> and click the bookmarklet, you should see the CSS3 effects toggle off.</p>
<p>Note that this is a simple, none-too-bright bookmarklet and only removes the obvious traces of CSS3. It doesn&#8217;t inspect your <span class="caps">CSS</span> for non-supported color values (like <span class="caps">RGBA</span>) or deal with many of the more advanced features of CSS3. In fact, all it does is eradicate these styles:</p>
<ul>
	<li><code>border-radius</code></li>
	<li><code>box-shadow</code></li>
	<li><code>text-shadow</code></li>
	<li><code>border-image</code></li>
	<li><code>background-origin</code></li>
	<li><code>background-clip</code></li>
</ul>
<p>However, it&#8217;s still a useful tool if you&#8217;re designing for the future with an eye for the past. Enjoy!</p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby Quick Tip: Regular Expressions in Case Statements]]></title>
    <link href="http://congmo.github.com/blog/2010/03/29/ruby-quicktip-regular-expressions-in-case-statements/"/>
    <updated>2010-03-29T00:00:00+08:00</updated>
    <id>http://congmo.github.com/blog/2010/03/29/ruby-quicktip-regular-expressions-in-case-statements</id>
    <content type="html"><![CDATA[<p>Did you know that you can use regular expressions in <code>case</code> statements in Ruby to check for a match? For instance, if I&#8217;m implementing some <code>method_missing</code> functionality and I want to check for bang or question methods, I might be tempted to do something like this:</p>
<div>
<pre><code class='ruby'>def method_missing(name, *args)
name = name.to_s
if name.match(/!$/)
puts &quot;Bang Method!&quot;
elsif name.match(/\?$/)
puts &quot;Query Method?&quot;
else
super
end
<p>end</code></pre></p>
</div>
<p>But it&#8217;d be much cleaner if instead it looked like this:</p>
<div>
<pre><code class='ruby'>def method_missing(name, *args)
case name.to_s
when /!$/
puts &quot;Bang Method!&quot;
when /\?$/
puts &quot;Query Method?&quot;
else
super
end
<p>end</code></pre></p>
</div>
<p>This is great, but now what if we want to call out a method for bang and question methods? Thankfully Ruby has us covered there as well:</p>
<div>
<pre><code class='ruby'>def method_missing(name, *args)
case name.to_s
when /^(.*)!$/
bang_method($1)
when /^(.*)\?$/
question_method($1)
else
super
end
<p>end</code></pre></p>
</div>
<p>By using the <code>$1</code> global variable we can access the last regular expression match performed by ruby. This is just one of those little details that makes working with Ruby such a joy.</p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hashie Gains a Chainable Hash]]></title>
    <link href="http://congmo.github.com/blog/2010/03/05/hashie-gains-a-chainable-hash/"/>
    <updated>2010-03-05T00:00:00+08:00</updated>
    <id>http://congmo.github.com/blog/2010/03/05/hashie-gains-a-chainable-hash</id>
    <content type="html"><![CDATA[<p><a href="http://intridea.com/2009/11/12/hashie-the-hash-toolkit">Hashie</a>, Intridea&#8217;s Hash Toolkit, is today with version 0.2.0 gaining a new member: the Clash.</p>
<p>A Clash is a &#8220;Chainable Lazy Hash&#8221; that allows you to construct a hash using method syntax. It is meant to be used in a similar way to the way that Rails 2.x&#8217;s <code>named_scope</code> or Arel&#8217;s query building work. Let&#8217;s start with an example:</p>
<div>
<pre><code class='ruby'>require 'hashie/clash'
<p>c = Hashie::Clash.new<br />
c.where(:abc =&gt; &#8216;def&#8217;).order(:created_at)</p>
<p>c == {:where =&gt; {:abc =&gt; &#8217;def&#8217;}, :order =&gt; :created_at}</code></pre></p>
</div>
<p>Pretty neat, right? But you can go beyond that. Clash also allows you to use bang method notation to create, dive into, and return from sub-hashes. Let me show you what I mean:</p>
<div>
<pre><code class='ruby'>c = Hashie::Clash.new
<p>c.where<img src=".abc(&#39;def&#39;).ghi(123)._end" alt="" />.order(:created_at)</p>
<p>c == {:where =&gt; {:abc =&gt; &#8216;def&#8217;, :ghi =&gt; 123}, :order =&gt; :created_at}</code></pre></p>
</div>
<p>By using a bang method, you automatically create a subhash that is then the subject of the chain, allowing you to create more keys on that subhash. Then, if you want to jump back up to the top-level hash, you simply call the <code>_end!</code> method to return up one level in the stack (thanks to jQuery for that particular inspiration).</p>
<p>While Clash is a very simple tool, we hope that it could eventually make its way into some of the new ORMs that are cropping up around NoSQL systems (such as <a href="http://github.com/jnunemaker/mongomapper">MongoMapper</a>) to provide the same kind of effortless chaining that has made ActiveRecord so easy to work with.</p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Redfinger: A Ruby WebFinger Gem]]></title>
    <link href="http://congmo.github.com/blog/2010/02/12/redfinger-a-ruby-webfinger-gem/"/>
    <updated>2010-02-12T00:00:00+08:00</updated>
    <id>http://congmo.github.com/blog/2010/02/12/redfinger-a-ruby-webfinger-gem</id>
    <content type="html"><![CDATA[<p>Just yesterday, Google <a href="http://www.readwriteweb.com/archives/google_enables_webfinger_for_google_profiles_email_as_identity.php">turned on webfinger for all GMail accounts</a>. Today, I&#8217;m releasing a RubyGem to help you use the new protocol!</p>
<h3>What&#8217;s a WebFinger?</h3>
<p><a href="http://code.google.com/p/webfinger/">WebFinger</a> is a new protocol for extracting public information about a person via their e-mail address. It is meant to complement systems such as OpenID as well as give a simple way to get basic information about a user without having to ask them for it.</p>
<p>E-Mail providers can implement WebFinger by creating a special <span class="caps">URL</span> (specifically at <code>/.well-known/host-meta</code>) that is an <span class="caps">XRD</span> <span class="caps">XML</span> document telling the requester a <span class="caps">URL</span> at which they can find out more about e-mail addresses on their domain. Google&#8217;s, for example, is <code>http://www.google.com/s2/webfinger/?q={uri}</code>. When the WebFinger endpoint is requested with an e-mail address in place of <code>{uri}</code>, Google looks up information about that e-mail&#8217;s public profile and provides it in a standardized <span class="caps">XRD</span> <span class="caps">XML</span> format.</p>
<p>So why WebFinger when OpenID already exists? Users are used to associating their e-mail address with their identity. It&#8217;s natural since an e-mail address is (usually) for a specific person. By putting a protocol in place to find out more about an e-mail address without requiring additional input from the user, a host of options become available.</p>
<p>For instance, if I&#8217;m an application looking to authenticate using OpenID, I can ask a user for their e-mail address instead of their OpenID <span class="caps">URL</span> (something that will confuse mainstream users to no end). Or, if I want to automatcially fill in basic profile information, I can check to see if a parseable profile page is available in a format such as hCard.</p>
<h3>Enter Redfinger</h3>
<p>Redfinger is a library built to easily consume the WebFinger protocol. Installing it is simple:</p>
<pre>gem install redfinger</pre>
<p>Using it is just as simple:</p>
<div>
<pre><code class='ruby'>require 'rubygems'
<p>require &#8216;redfinger&#8217;</p>
<p>finger = Redfinger.finger(&#8216;youraccount@gmail.com&#8217;)<br />
finger.open_id.first.to_s # =&gt; &quot;http://www.google.com/profiles/youraccount&quot;</code></pre></p>
</div>
<p>Redfinger will query the host of the e-mail domain specified, and, if the Webfinger protocol is supported, retrieve information about that e-mail address including such links as OpenID Provider, hCard <span class="caps">URL</span>, and more.</p>
<p>How can you use this today? Well, if you&#8217;re an OpenID consumer you can use the above code to try to &#8220;intelligently find&#8221; an OpenID endpoint from an e-mail address. Of course, it will just about only work with Google at the moment (this is an alpha protocol, after all). Or, you could install the <code>mofo</code> gem (a gem for parsing microformats for web pages) and do some neat things with microformats:</p>
<div>
<pre><code class='ruby'>require 'rubygems'
<p>require &#8216;mofo&#8217;<br />
require &#8216;redfinger&#8217;</p>
<p>finger = Redfinger.finger(&#8216;account@gmai.com&#8217;)<br />
card = hCard.find(finger.hcard.first.to_s)<br />
card.fn # =&gt; &quot;That GMail user&#8217;s full name&quot;<br />
card.title # =&gt; &quot;The title he/she entered on Google Profile&quot;</code></pre></p>
</div>
<p>Here Redfinger determines a <span class="caps">URL</span> that will have hCard information about the e-mail address specified, and the Mofo gem goes out and fetches that address, parsing out the information.</p>
<p>WebFinger is still brand new (Google calls it &#8220;alpha&#8221;) but it shows some promise for being a great way to make the open web more seamless for users. As always, <a href="http://github.com/intridea/redfinger">the Redfinger source code is available on GitHub</a> and <a href="http://rdoc.info/projects/intridea/redfinger">RDoc Documentation</a> is available. Check it out!</p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Simple Mustache JSON Serialization]]></title>
    <link href="http://congmo.github.com/blog/2010/01/21/simple-mustache-json-serialization/"/>
    <updated>2010-01-21T00:00:00+08:00</updated>
    <id>http://congmo.github.com/blog/2010/01/21/simple-mustache-json-serialization</id>
    <content type="html"><![CDATA[<p>If you&#8217;ve taken a look at <a href="http://github.com/defunkt/mustache">Mustache</a>, the &#8220;stupid in a good way&#8221; templating engine, you might know that there are also Javascript Mustache renderers such as <a href="http://github.com/janl/mustache.js">Mustache.js</a>. Today I&#8217;ve released a small library called <a href="http://github.com/intridea/mustache_json">mustache_json</a> that allows you to compile your Mustache view objects into <span class="caps">JSON</span>, allowing them to be interpreted by Javascript Mustache rendering engines.</p>
<p>What this means for your project is that you will finally have a identical client-side and server-side rendering interface, opening wide the opportunities for pushing more of the rendering work onto the client-side, a boon for many real-time and heavy-interaction applications.</p>
<p>To install <code>mustache_json</code>, just get the gem from Gemcutter:</p>
<pre><code>gem install mustache_json</code></pre>
<p>To use it, simply <code>require 'mustache_json'</code> and all of your Mustache objects will automatically be given a <code>#to_json</code> method. For instance:</p>
<div>
<pre><code class='ruby'>require 'mustache_json'
<p>class Person &lt; Mustache<br />
  def initialize(first_name, last_name)<br />
    context[:first_name], context[:last_name] = first_name, last_name<br />
  end</p>
def initials
&quot;#{context[:first_name][0..0]}.#{context[:last_name][0..0]}.&quot;
end

def listing
&quot;#{context[:last_name]}, #{context[:first_name]}&quot;
end
<p>end</p>
<p>bob = Person.new(&#8216;Bob&#8217;, &#8216;Bobson&#8217;)<br />
bob.to_json</code></pre></p>
</div>
<p>This will render into a <span class="caps">JSON</span> object that looks like this:</p>
<div>
<pre><code class='javascript'>{&amp;quot;last_name&amp;quot;:&amp;quot;Bobson&amp;quot;,&amp;quot;initials&amp;quot;:&amp;quot;B.B.&amp;quot;,&amp;quot;listing&amp;quot;:&amp;quot;Bobson, Bob&amp;quot;,&amp;quot;first_name&amp;quot;:&amp;quot;Bob&amp;quot;}</code></pre>
</div>
<p>Mustache <span class="caps">JSON</span> gives you access to all of the public instance methods you declare in your Mustache as well as any context you have set. It is essentially a fully compiled version of the Mustache view, providing everything another renderer needs to create the actual markup. The <span class="caps">JSON</span> back-end for this library is swappable, meaning you can use the <span class="caps">JSON</span> gem, <span class="caps">JSON</span> pure, ActiveSupport, or Yajl by default (and any other class with an <code>encode</code> method if you&#8217;ve got a different library).</p>
<p><a href="http://rdoc.info/projects/intridea/mustache_json">Documentation is available on RDoc.info</a> and the <a href="http://github.com/intridea/mustache_json">source is available on GitHub</a>. Stay tuned for posts in the future about utilizing this library to actually perform identical rendering in Ruby and Javascript.</p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Compiling Mustache Views for Mustache.js]]></title>
    <link href="http://congmo.github.com/blog/2009/11/18/compiling-mustache-views-for-mustache-js/"/>
    <updated>2009-11-18T00:00:00+08:00</updated>
    <id>http://congmo.github.com/blog/2009/11/18/compiling-mustache-views-for-mustache-js</id>
    <content type="html"><![CDATA[<p>I&#8217;ve been investigating the usage of <a href="http://github.com/defunkt/mustache">Mustache</a>, the dead-simple templating language with the funny name, and one very enticing aspect of Mustache is that it&#8217;s so simple it can easily be ported across languages. <a href="http://github.com/janl/mustache.js">Mustache.js</a> is a Javascript implementation of Mustache that works based on a simple <span class="caps">JSON</span> hash and a string template. Wouldn&#8217;t it be awesome if we could use the same Mustache template on the server side and in Javscript without having to construct two sets of logic? Yes it would, and here&#8217;s how.</p>
<h3>Creating a Serializable Mustache</h3>
<p>Mustache works by calling methods from the template on the Mustache view object. There are no arguments, no filters, just plain old Ruby methods. Mustache.js works by reading values from a Javascript object or evaluating functions on<br />
that object. So, if we want to use the same logic to power both our Ruby-built Mustaches and our Javascript-built Mustaches, all we need to do is convert that logic to <span class="caps">JSON</span>!</p>
<p>Now, you could write a <code>#to_json</code> method for each of your Mustache views, but where&#8217;s the DRYness in that? Instead let&#8217;s create a Serializable Mustache that automatically catalogs the methods that need to be serialized to <span class="caps">JSON</span>:</p>
<div>
<pre><code class='ruby'>module Mustache::Serializable
def self.included(base)
base.extend ClassMethods
end

module ClassMethods
def serializable_methods
public_instance_methods(false)
end
end
def serializable_hash
hash = self.class.serializable_methods.inject({}) do |result, method|
<ol>
	<li>Symbolize the method to work better with the Mustache Context.<br />
      result[method.to_sym] = self.send(method)<br />
      result<br />
    end</li>
</ol>
hash.merge!(self.context)
end
def to_json
serializable_hash.to_json
end
<p>end</code></pre></p>
</div>
<p>That was easy enough! What we&#8217;re doing is compiling a list of methods that we want to serialize by saying &#8216;any public method that is declared in <strong>this specific Mustache class</strong> should be serialized&#8217;, constructing a hash from those methods, merging in the Mustache&#8217;s context, and providing a <span class="caps">JSON</span> representation of that hash.</p>
<h3>Rendering in Ruby</h3>
<p>Now that you have a simple way to serialize to <span class="caps">JSON</span>, we need to actually be able to render this Mustache in it&#8217;s server-side native form: Ruby. Here let&#8217;s say we&#8217;re working on a Sinatra application since it has probably the simplest setup. We&#8217;re not going to use the built-in Sinatra support from Mustache because it will be clearer in the code if we don&#8217;t. Here&#8217;s the entire application (make sure you somehow include the serializable code from above):</p>
<div>
<pre><code class='ruby'>require 'rubygems'
<p>require &#8216;sinatra&#8217;<br />
require &#8216;mustache&#8217;</p>
<p>class Person &lt; Mustache<br />
  include Mustache::Serializable</p>
def initialize(first_name, last_name)
@first_name = first_name
@last_name = last_name
end

def formal_name
&quot;#{@last_name}, #{@first_name}&quot;
end

def initials
&quot;#{@first_name[0..0]}.#{@last_name[0..0]}&quot;
end

template = &lt;&lt;-<span class="caps">HTML</span>
&lt;dl&gt;
&lt;dt&gt;Formal Name:&lt;/dt&gt; &lt;dd&gt;&lt;/dd&gt;
&lt;dt&gt;Initials:&lt;/dt&gt; &lt;dd&gt;&lt;/dd&gt;
&lt;/dl&gt;
<span class="caps">HTML</span>
<p>end</p>
<p>get &#8216;/person/:last_name/:first_name.:format&#8217; do<br />
  @mustache = Person.new(params[:first_name], params[:last_name])<br />
  @mustache.to_html<br />
end</code></pre></p>
</div>
<h3>Rendering in Javascript</h3>]]></content>
  </entry>
  
</feed>
